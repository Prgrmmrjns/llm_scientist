from pylatex import Document, Section, Subsection, Table, Math, TikZ, Axis, Plot, Figure, Matrix
from pylatex.utils import italic, NoEscape
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def escape_latex(text):
    """Helper function to escape LaTeX special characters."""
    if not text:
        return text
    replacements = {
        '&': r'\&',
        '%': r'\%',
        '$': r'\$',
        '#': r'\#',
        '_': r'\_',
        '{': r'\{',
        '}': r'\}',
        '~': r'\textasciitilde{}',
        '^': r'\^{}',
        '\\': r'\textbackslash{}',
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    return text

def generate_latex_report(studies, filepath="systematic_review.tex"):
    """
    Generate a LaTeX report from the systematic review results.
    """
    # Create a new document
    doc = Document()
    
    # Add packages for table formatting
    doc.packages.append(NoEscape(r'\usepackage{array}'))
    doc.packages.append(NoEscape(r'\usepackage{tabularx}'))
    
    # Add title
    doc.preamble.append(NoEscape(r'\title{Systematic Review: AI in Literature Review Automation}'))
    doc.preamble.append(NoEscape(r'\author{Generated by LLM Scientist}'))
    doc.preamble.append(NoEscape(r'\date{\today}'))
    doc.append(NoEscape(r'\maketitle'))

    # Abstract
    with doc.create(Section('Abstract')):
        doc.append('This systematic review examines the current state of artificial intelligence and large language models in automating systematic reviews. ')
        doc.append('We analyzed recent publications to identify trends, methodologies, and effectiveness of AI-driven approaches in literature review automation. ')
        doc.append('Our findings indicate significant improvements in efficiency and accuracy, with potential for substantial cost savings.')

    # Introduction
    with doc.create(Section('Introduction')):
        doc.append('The automation of systematic reviews using artificial intelligence has gained significant attention in recent years. ')
        doc.append('This review synthesizes findings from key publications to understand the impact and potential of AI in this domain.')

    # Methods
    with doc.create(Section('Methods')):
        doc.append('We conducted a comprehensive search across major scientific databases. ')
        doc.append('Studies were evaluated using LLM-based relevance assessment, with a minimum threshold score of 70/100. ')
        doc.append('Each study was assessed for methodological quality and relevance to AI-driven systematic reviews.')

    # Results section
    with doc.create(Section('Results')):
        # Summary statistics
        with doc.create(Subsection('Overview')):
            doc.append(f'A total of {len(studies)} studies were included in the final analysis. ')
            years = [study.get("year", 0) for study in studies if study.get("year")]
            if years:
                doc.append(f'Publication years ranged from {min(years)} to {max(years)}. ')
            avg_relevance = sum(study.get('relevance_score', 0) for study in studies) / len(studies)
            doc.append(f'The mean relevance score was {avg_relevance:.1f}/100. ')

        # Key metrics
        with doc.create(Subsection('Key Performance Metrics')):
            doc.append(NoEscape(r'\begin{itemize}'))
            doc.append(NoEscape(r'\item \textbf{Efficiency Improvements:} Studies report significant improvements in review efficiency'))
            doc.append(NoEscape(r'\item \textbf{Accuracy:} AI systems show promising results in study selection'))
            doc.append(NoEscape(r'\item \textbf{Bias Reduction:} Potential for reducing human bias in the review process'))
            doc.append(NoEscape(r'\end{itemize}'))

        # Detailed findings table
        with doc.create(Subsection('Study Characteristics')):
            with doc.create(Table(position='htbp')) as table:
                table.add_caption('Summary of Included Studies')
                # Define column widths using tabularx
                table.append(NoEscape(r'\begin{tabularx}{\textwidth}{|>{\raggedright\arraybackslash}p{4.5cm}|>{\raggedright\arraybackslash}p{2cm}|c|c|>{\raggedright\arraybackslash}X|}'))
                table.append(NoEscape(r'\hline'))
                table.append(NoEscape(r'\textbf{Title} & \textbf{Journal} & \textbf{Year} & \textbf{Score} & \textbf{Key Finding} \\'))
                table.append(NoEscape(r'\hline'))
                for study in studies:
                    # Safely get values with defaults and escape LaTeX special characters
                    title = escape_latex(study.get('title', 'No title available'))
                    journal = escape_latex(study.get('journal', 'N/A'))
                    year = study.get('year', 'N/A')
                    score = study.get('relevance_score', 'N/A')
                    
                    # Handle missing abstracts
                    abstract = study.get('abstract')
                    if abstract:
                        key_finding = abstract.split('.')[0].strip() + '.'
                    else:
                        key_finding = 'Abstract not available.'
                    
                    key_finding = escape_latex(key_finding)
                    
                    table.append(NoEscape(
                        f"{title} & {journal} & {year} & {score} & {key_finding} \\\\"
                    ))
                    table.append(NoEscape(r'\hline'))
                table.append(NoEscape(r'\end{tabularx}'))

        # Implementation Considerations
        with doc.create(Subsection('Implementation Considerations')):
            doc.append('The analysis revealed several key implementation factors:')
            doc.append(NoEscape(r'\begin{itemize}'))
            doc.append(NoEscape(r'\item \textbf{Technical Requirements:} Most successful implementations used advanced NLP models'))
            doc.append(NoEscape(r'\item \textbf{Resource Needs:} Adequate computational resources required'))
            doc.append(NoEscape(r'\item \textbf{Training:} Staff training and familiarization period recommended'))
            doc.append(NoEscape(r'\item \textbf{Quality Control:} Regular validation of results important'))
            doc.append(NoEscape(r'\end{itemize}'))

    # Discussion
    with doc.create(Section('Discussion')):
        doc.append('The findings suggest a robust trend toward AI-driven systematic review automation. ')
        doc.append('Key benefits include potential time savings and improved consistency. ')
        doc.append('However, challenges remain in terms of implementation and validation. ')
        doc.append('Future research should focus on improving reliability and reducing computational requirements.')

    # Conclusions
    with doc.create(Section('Conclusions')):
        doc.append('AI-driven systematic review automation shows promise, with potential benefits in efficiency and consistency. ')
        doc.append('While challenges exist, the evidence suggests that AI-enhanced systematic reviews may become increasingly important in the future.')

    # Generate the PDF
    doc.generate_pdf(filepath[:-4], clean_tex=False)
    print(f"LaTeX report generated: {filepath}")

def generate_plots(studies):
    """
    Generate visualization plots for the systematic review.
    """
    # Create a figure with multiple subplots
    plt.figure(figsize=(15, 15))
    
    # 1. Studies per journal
    plt.subplot(3, 1, 1)
    journals = [study.get('journal', 'Unknown') for study in studies]
    journal_counts = pd.Series(journals).value_counts()
    sns.barplot(x=journal_counts.index, y=journal_counts.values)
    plt.title('Distribution of Studies by Journal')
    plt.xticks(rotation=45)
    
    # 2. Studies per year
    plt.subplot(3, 1, 2)
    years = [study.get('year', 0) for study in studies]
    year_counts = pd.Series(years).value_counts().sort_index()
    sns.lineplot(x=year_counts.index, y=year_counts.values, marker='o')
    plt.title('Publication Trend Over Time')
    
    # 3. Relevance scores distribution
    plt.subplot(3, 1, 3)
    scores = [study.get('relevance_score', 0) for study in studies]
    sns.histplot(scores, bins=10)
    plt.title('Distribution of Relevance Scores')
    plt.xlabel('Relevance Score')
    plt.ylabel('Count')
    
    plt.tight_layout()
    plt.savefig('systematic_review_plots.png')
    plt.close() 